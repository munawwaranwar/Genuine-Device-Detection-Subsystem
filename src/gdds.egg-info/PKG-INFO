Metadata-Version: 2.1
Name: gdds
Version: 1.0.0
Summary: Detection of genuine devices among duplicated ones
Home-page: https://github.com/dirbs/gdds
Author: Munawar Anwar
Author-email: munawar@3gca.org
License: UNKNOWN
Description: 
        Copyright (c) 2018-2019 Qualcomm Technologies, Inc.
        
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the
        limitations in the disclaimer below) provided that the following conditions are met:
        
        * Redistributions of source code must retain the above copyright notice, this list of conditions and the following
        disclaimer.
        * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided with the distribution.
        * Neither the name of Qualcomm Technologies, Inc. nor the names of its contributors may be used to endorse or promote
        products derived from this software without specific prior written permission.
        * The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
        If you use this software in a product, an acknowledgment is required by displaying the trademark/log as per the details
        provided here: https://www.qualcomm.com/documents/dirbs-logo-and-brand-guidelines
        * Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
        * This notice may not be removed or altered from any source distribution.
        
        NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY
        THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
         IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
         COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
         DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
         BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
         (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
         POSSIBILITY OF SUCH DAMAGE.
        
        ## GDDS - Genuine Device Detection Subsystem
        Genuine Device Duplication Subsystem is a part of the Device Identification, Registration and Blocking (DIRBS) System.
        The main purpose of GDDS is to detect the genuine devices among all the duplicated ones.
        
        ### Documentation
        
        ### Frontend Application Repo
        
        ### Directory structure
        This repository contains code for **GDDS** part of the **DIRBS**. It contains
        * ``src/gdds/`` -- The GDDS Python package, to be installed on target machines. SQL files are included in here as 
        they are distributed as package data.
        * ``mock/`` -- Sample data files etc which are used in app to be reside here
        * ``tests/`` -- Unit test scripts and Data
        * ``Documentation/`` -- related documentation for GDDS
        
        ### Prerequisites
        In order to run a development environment, [Python 3.0+](https://www.python.org/download/releases/3.0/) and
        [Postgresql10](https://www.postgresql.org/about/news/1786/) are assumed to be already installed.
        
        We also assume that this repo is cloned from Github onto the local computer, it is assumed that
        all commands mentioned in this guide are run from root directory of the project and inside
        ```virtual environment```
        
        On Windows, we assume that a Bash like shell is available (i.e Bash under Cygwin), with GNU make installed.
        
        ### Starting a dev environment
        The easiest and quickest way to get started is to use local-only environment (i.e everything runs locally, including
        Postgresql Server). To setup the local environment, follow the section below:
        
        ### Setting up local dev environment
        For setting up a local dev environment we assume that the ```prerequisites``` are met already. To setup a local
        environment:
        * Create database using Postgresql (Name and credentials should be same as in [config](mock/test-config.ini))
        * Create virtual environment using **virtualenv** and activate it:
        ```bash
        virtualenv venv
        source venv/bin/activate
        ```
        Make sure that virtual-env is made using Python3 and all the required dependencies are installed.
        * Run Database migrations using:
        ```bash
        python manage.py db init
        python manage.py db migrate
        python manage.py db upgrade
        ```
        This will automatically create and migrate database schemas and requirements.
        
        * Install setup for default configurations using:
        ```bash
        python setup.py install
        ```
        
        * Start GDDS development server using:
        ```bash
        python run.py
        ```
        This will start a flask development environment.
        
        * To run unit tests, run:
        ```bash
        pytest -v -s
        ```
        
        ### CLI Commands
        Run below CLI commands in Venv as per requirements 
         
        * To load GSMA-TAC-Database File
        ```bash
        update-gsma-tacs <file_path>
        e.g.
        update-gsma-tacs /home/gdds_files/gsma_tac_file.csv
        ```
        
        * To load Duplication-List from DIRBS-CORE
        ```bash
        import duplication_list <file_path>
        e.g.
        import duplication_list /home/gdds_files/dup_list.csv
        ```
        
        * Send Request-SMS to all duplicated users to ask for device info
        ```bash
        send-request-sms all
        ```
        
        * Send Request-SMS only to unnotified users to ask for device info
        ```bash
        send-request-sms unnotified
        ```
        
        
        * To run Comparison-Algorithm
        ```bash
        run-comparison
        ```
        
        * To send SMS to all Genuine marked users about their Device pairing
        ```bash
        send-intimation-sms genuine
        ```
        
        
        * To send SMS to all Duplicated marked users about their Device black-listing
        ```bash
        send-intimation-sms duplicated
        ```
        
        * To create Black-List & Pairing-List for Authority
        ```bash
        generate-lists
        ```
        
        ### Other Helpful Commands
        
        * To Upgrade already installed database:
        ```bash
        python manage.py db upgrade
        ```
        
        
        * To run unit and regression tests:
        ```bash
        pytest -v -s
        ```
        
        
        * To enable different languages & activate their translations from English
        ```bash
        pybabel extract -F babel.cfg -k _l -o messages.pot .
        pybabel init -i messages.pot -d app/translations -l <language-code>
        ```
        e.g to translate in Spanish 
        ```bash
        pybabel init -i messages.pot -d app/translations -l es
        ```
        Finally to compile the language
        ```bash
        pybabel compile -d app/translations
        ```
        To update any translation after compilation
        ```bash
        pybabel update -i messages.pot -d app/translations -l es
        ```
        
        
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Requires-Python: >=3.6
Description-Content-Type: text/markdown
